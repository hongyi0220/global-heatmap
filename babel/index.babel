class App extends React.Component {
   constructor(props) {
      super(props);
      this.state = {
         dataset: null
      };
      this.fetchData = this.fetchData.bind(this);
      this.buildMap = this.buildMap.bind(this);
      this.temperatureToColor = this.temperatureToColor.bind(this);
   }
   
   fetchData() {
      const url = 'https://raw.githubusercontent.com/hongyi0220/ProjectReferenceData/master/global-temperature.json';
      fetch(url)
         .then(response => response.json())
         .then(responseJson => this.setState({ dataset: responseJson }, () => this.buildMap(this.state.dataset)));
   }
   
   temperatureToColor(temp) {
      if (temp < 2) return 'rgb(50,12,125)';
      else if (temp < 2.5) return 'rgb(2,13,128)';
      else if (temp < 3) return 'rgb(7,57,177)';
      else if (temp < 3.5) return 'rgb(11,36,251)';
      else if (temp < 4) return 'rgb(22,130,251)';
      else if (temp < 4.5) return 'rgb(33,191,252)';
      else if (temp < 5) return 'rgb(45,255,254)';
      else if (temp < 5.5) return 'rgb(42,246,199)';
      else if (temp < 6) return 'rgb(44,213,142)';
      else if (temp < 6.5) return 'rgb(24,161,97)';
      else if (temp < 7) return 'rgb(51,168,52)';
      else if (temp < 7.5) return 'rgb(54,198,56)';
      else if (temp < 8) return 'rgb(41,252,46)';
      else if (temp < 8.5) return 'rgb(205,253,52)';
      else if (temp < 9) return 'rgb(255,253,56)';
      else if (temp < 9.5) return 'rgb(237,236,133)';
      else if (temp < 10) return 'rgb(227,203,109)';
      else if (temp < 10.5) return 'rgb(219,173,82)';
      else if (temp < 11) return 'rgb(253,169,41)';
      else if (temp < 11.5) return 'rgb(252,86,31)';
      else if (temp < 12) return 'rgb(252,86,31)';
      else if (temp < 12.5) return 'rgb(198,8,19)';
      else if (temp < 13) return 'rgb(171,6,15)';
      else if (temp < 13.5) return 'rgb(145,4,11)';
      else if (temp < 14) return 'rgb(119,2,7)';
   }
   
   buildMap(dataset) {
      const width = 1000;
      const height = 500;
      const padding = 50;
      
      const monthlyData = dataset.monthlyVariance;
      const baseTemp = dataset.baseTemperature;
      const month = ['January', 'February', 'Marh', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
         
      const svg = d3.select('.container')
                        .append('svg')
                        .attr('width', width)
                        .attr('height', height);

      // Largest variance: 5.228, smallest variance: -6.976
      // Lowest temperature: 1.684, 
      // highest temperature: 13.888
      
      const domain = monthlyData.filter(d =>
         d.month === 1).map(d => d.year);

      const xScale = d3.scaleBand().domain(domain)
                              .range([padding, (width - padding)]);
      const yScale = d3.scaleBand().domain(monthlyData.filter(d => d.year === 2010).map(d => d.month))
                              .range([padding, (height - padding)]);
      
      svg.selectAll('rect')
            .data(monthlyData)
            .enter()
            .append('rect')
            .attr('x', d => xScale(d.year))
            .attr('y', d => yScale(d.month))
            .attr('width', xScale.bandwidth())
            .attr('height', ((height - padding * 2) / 12))
            .attr('fill', d => this.temperatureToColor(baseTemp + d.variance))
            .attr('class', 'bar')
            .append('title')
            .text(d => baseTemp + d.variance + '℃' +'\n' + d.year + '/' + month[d.month - 1])
      
      const xAxis = d3.axisBottom(xScale)
                        .tickValues(xScale.domain().filter((d, i) => !(i % 10)));
      
      svg.append('g')
            .attr('transform', 'translate(0,' + (height - padding) + ')')
            .call(xAxis)
            .selectAll('text')
            .style('text-anchor', 'middle').style('font-family', 'Ropa Sans');
      
      const yAxis = d3.axisLeft(yScale.domain(monthlyData.map(d => month[d.month - 1])));

      svg.append('g')
            .attr('transform', 'translate(' + padding + ',0)')
            .call(yAxis).style('font-family', 'Ropa Sans');
      
      // Labels
      svg.append('text')
            .text('Month')
            .attr('x', padding - 3)
            .attr('y', -padding - 1.5)
            .attr('transform', 'rotate(90)')
            .attr('class', 'axis-label');
      
       svg.append('text')
            .text('Year')
            .attr('x', width - padding * 2.1)
            .attr('y', height - padding)
            .attr('class', 'axis-label');
      
      // Legend
      (() => {
         const colors = [];
         let iteration = 0;
         for (let c = 1.5; c < 14; c += 0.5) {
            iteration++
            colors.push(this.temperatureToColor(c))
            svg.append('text')
                  .text(c.toFixed(1))
                  .attr('x', (width / 2) - (padding * 1.32) + iteration * 20)
                  .attr('y', height - 3)
                  .attr('font-size', '0.6em');
         };
         for (let i = 0; i < 25; i++) {
            svg.append('rect')
               .attr('width', 20)
               .attr('height', 20)
               .attr('x', (width / 2) - padding + i * 20)
               .attr('y', height - padding / 1.6)
               .attr('fill', colors[i])
         }
      })();
   }

   componentDidMount() {
      this.fetchData();
   }
   
   render() {
      return (
         <div className='container'>
            <h1>Global Heatmap</h1>
            <h2>Global average temperature compared to baseline global average temperature (8.66℃) from 1951 - 1980</h2>
         </div>
      );
   }
}

ReactDOM.render(
   <App />,
   document.getElementById('app')
);